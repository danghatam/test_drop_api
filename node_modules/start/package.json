{
  "_args": [
    [
      "start@https://registry.npmjs.org/start/-/start-4.0.1.tgz",
      "/Users/danghatam/Workspace/Project/Drops-web"
    ]
  ],
  "_from": "start@latest",
  "_id": "start@4.0.1",
  "_inCache": true,
  "_location": "/start",
  "_phantomChildren": {},
  "_requested": {
    "name": "start",
    "raw": "start@https://registry.npmjs.org/start/-/start-4.0.1.tgz",
    "rawSpec": "https://registry.npmjs.org/start/-/start-4.0.1.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/start/-/start-4.0.1.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/start/-/start-4.0.1.tgz",
  "_shasum": "4682c494fd4965558e657be0edc60a17d3fe23a6",
  "_shrinkwrap": null,
  "_spec": "start@https://registry.npmjs.org/start/-/start-4.0.1.tgz",
  "_where": "/Users/danghatam/Workspace/Project/Drops-web",
  "author": {
    "email": "kir@soulshine.in",
    "name": "Kir Belevich",
    "url": "https://github.com/deepsweet"
  },
  "bugs": {
    "url": "https://github.com/start-runner/start/issues"
  },
  "dependencies": {
    "babel-runtime": "6.x.x"
  },
  "description": "Dead simple tasks runner",
  "devDependencies": {
    "babel-eslint": ">5.0.0-beta1",
    "babel-plugin-add-module-exports": "0.1.x",
    "babel-plugin-transform-runtime": "6.5.x",
    "babel-preset-es2015": "6.5.x",
    "eslint-config-rebem": "0.3.x",
    "eslint-plugin-babel": "3.1.x",
    "husky": "0.10.x",
    "sinon": "1.17.x",
    "start-babel-cli": "0.1.x",
    "start-start-preset": "0.2.x",
    "tape": "4.4.x"
  },
  "engines": {
    "node": ">=0.12.0",
    "npm": ">=2.7.0"
  },
  "files": [
    "build/"
  ],
  "homepage": "https://github.com/start-runner/start",
  "keywords": [
    "runner",
    "start",
    "tasks"
  ],
  "license": "MIT",
  "main": "build/index.js",
  "name": "start",
  "optionalDependencies": {},
  "readme": "# start\n\n[![npm](https://img.shields.io/npm/v/start.svg?style=flat-square)](https://www.npmjs.com/package/start)\n[![travis](http://img.shields.io/travis/start-runner/start.svg?style=flat-square)](https://travis-ci.org/start-runner/start)\n[![coverage](https://img.shields.io/codecov/c/github/start-runner/start.svg?style=flat-square)](https://codecov.io/github/start-runner/start)\n[![deps](https://img.shields.io/gemnasium/start-runner/start.svg?style=flat-square)](https://gemnasium.com/start-runner/start)\n[![gitter](https://img.shields.io/badge/gitter-join_chat_%E2%86%92-00d06f.svg?style=flat-square)](https://gitter.im/start-runner/start)\n\n<img src=\"logo.png\" width=\"100\" height=\"100\" align=\"right\" alt=\"logo\"/>\n\n* really [dead simple](lib/index.js)\n* extremely modular\n* flexible by the nature of composable functions\n* powered by chaining Promises to control tasks flow\n\n## Install\n\n```\nnpm i -S start\n```\n\n## Tasks\n\n```js\n// tasks.js\nimport Start from 'start';\nimport reporter from 'start-pretty-reporter';\nimport files from 'start-files';\nimport watch from 'start-watch';\nimport clean from 'start-clean';\nimport babel from 'start-babel';\nimport write from 'start-write';\nimport eslint from 'start-eslint';\nimport mocha from 'start-mocha';\nimport * as coverage from 'start-coverage';\nimport codecov from 'start-codecov';\n\nimport istanbul from 'babel-istanbul';\n\nconst start = Start(reporter());\n\nexport function build() {\n    return start(\n        files('build/'),\n        clean(),\n        files('lib/**/*.js'),\n        babel(),\n        write('build/')\n    );\n}\n\nexport function dev() {\n    return start(\n        files('build/'),\n        clean(),\n        files('lib/**/*.js'),\n        watch(file => start(\n            files(file),\n            babel(),\n            write('build/')\n        ))\n    );\n}\n\nexport function lint() {\n    return start(\n        files([ 'lib/**/*.js', 'test/**/*.js' ]),\n        eslint()\n    );\n}\n\nexport function test() {\n    return start(\n        files('test/**/*.js'),\n        mocha()\n    );\n}\n\nexport function tdd() {\n    return start(\n        files([ 'lib/**/*.js', 'test/**/*.js' ]),\n        watch(test)\n    );\n}\n\nexport function cover() {\n    return start(\n        files('coverage/'),\n        clean(),\n        files('lib/**/*.js'),\n        coverage.instrument(istanbul),\n        test,\n        coverage.report()\n    );\n}\n\nexport function travis() {\n    return start(\n        lint,\n        cover,\n        codecov()\n    );\n}\n```\n\nEach named export return a \"tasks runner\" – sequence of tasks Promises managed by `start`, which will run them one by one passing data through until an error occurs.\n\nAs you can see in the example above runners can be nested in each other to achieve great reusability. Also, because `start` is just a Promise you can put few runners in `Promise.all()` to get a parallel run for free.\n\nYou can then call tasks runners manually:\n\n```js\nbuild()\n    .then(data => {\n        console.log('ok');\n    })\n    .catch(error => {\n        console.log('not ok');\n        process.exit(1);\n    });\n```\n\nOr you can use an external CLI:\n\n## CLI\n\n```\nstart <tasks file or moduleID to require> <tasks runner name>\n```\n\nBrowse [available CLIs](https://www.npmjs.com/browse/keyword/start-cli).\n\n### Handy NPM scripts\n\nFor example for `tasks.js` listed above:\n\n```\nnpm i -D start-babel-cli\n```\n\n```js\n// package.json\n\"scripts\": {\n  \"start\": \"start ./tasks\"\n}\n```\n\nAnd your available commands are:\n\n```\nnpm start build\nnpm start dev\nnpm start lint\nnpm start test\nnpm start tdd\nnpm start cover\nnpm start travis\n```\n\nSee [NPM documentation](https://docs.npmjs.com/cli/run-script) for details.\n\n### Presets\n\n`<tasks file or moduleID to require>` means that you can make your tasks file (and its dependencies!) completely external and shareable. Like a `start-my-es6-preset` package for a bunch of your projects. See [start-start-preset](https://github.com/start-runner/start-preset) as an example or browse [available presets](https://www.npmjs.com/browse/keyword/start-preset).\n\n## API\n\n```js\nstart(reporter())(\n    task1(),\n    task2(),\n    ...\n);\n```\n\n### Reporter\n\nReporter is an external function that print the results of running tasks.\n\nThe simplest dummy reporter can be represented as following:\n\n```js\nexport default (params) => (name, type, message) => {\n    console.log(name, type, message);\n};\n```\n\n#### `(params)`\n\nFirst function call made by user. `params` can be options object, multiple arguments or whatever your reporter needs to be configured and initialized.\n\n#### `(name, type, message)`\n\nSecond function calls made by `start` and tasks:\n\n* `name` – task name\n* `type` – log type:\n  * `start`\n  * `info` – must come with `message`\n  * `resolve`\n  * `error` – may come with `message`\n* `message` – may be undefined, string, array of strings or instance of Error\n\nSee [start-simple-reporter](https://github.com/start-runner/simple-reporter) as an example or browse [available reporters](https://www.npmjs.com/browse/keyword/start-reporter).\n\n### Task\n\nThe simplest dummy task can be represented as following:\n\n```js\nexport default (params) => (input) => {\n    return function taskName(log) {\n        const cats = require('cats-names');\n\n        log(cats.random());\n\n        return Promise.resolve(input);\n    };\n};\n```\n\n#### `(params)`\n\nFirst function call made by user. `params` can be options object, multiple arguments or whatever your task needs to be configured and initialized.\n\n#### `(input)`\n\nSecond function call made by `start` with the result of previous task in chain. It's a good idea to pass the `input` data through if your task doesn't modify it.\n\n[start-files](https://github.com/start-runner/files) provides an array of found files paths as output:\n\n```js\n[\n    '/absolute/path/file1.js',\n    '/absolute/path/file2.js'\n]\n```\n\n[start-write](https://github.com/start-runner/write) is rely on array of `{ path, data }` objects as input:\n\n```js\n[\n    {\n      path: '/absolute/path/file1.js',\n      data: '…'\n    },\n    {\n      path: '/absolute/path/file2.js',\n      data: '…'\n    }\n]\n```\n\nSo every task between them should rely on the first structure and provide the second one.\n\n#### `taskName(log)`\n\nThird function call made by `start`. `taskName` will be used as task name for logging, and `log` is a function that bound to `reporter(name, 'info')`. So if your task has something to say expect errors then you have to call `log` with message (or array of messages) like `log('beep')`.\n\n#### `require`\n\nIt's a good idea to \"lazyload\" your dependencies inside a task scope instead of requiring them at the very top. [Execution time can be a problem](https://github.com/gulpjs/gulp/issues/632), and there is no need to require all the heavy dependencies while cleaning a single directory (for example).\n\n#### `return`\n\nAnd finally, your task must return an ES6 Promise. It can be resolved with data which will be passed to the next Promise in chain, or rejected with some message (or array of messages).\n\nBrowse [available tasks](https://www.npmjs.com/browse/keyword/start-task).\n\n## Copyrights\n\nThis software is released under the terms of the [MIT license](LICENSE).\n\nThe font used in logo is [supernova fat](http://www.ffonts.net/supernova-fat.font).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/start-runner/start.git"
  },
  "scripts": {
    "prepublish": "npm start build",
    "prepush": "npm start prepush",
    "start": "start start-start-preset"
  },
  "version": "4.0.1"
}
