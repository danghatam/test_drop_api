// Generated by CoffeeScript 1.10.0
var React, arrayEqual, assign, imageExists, isArray, isRetina, path;

React = require('react');

isRetina = require('is-retina');

isArray = require('isarray');

imageExists = require('image-exists');

path = require('path');

assign = require('object-assign');

arrayEqual = require('array-equal');

module.exports = React.createClass({
  displayName: 'RetinaImage',
  propTypes: {
    src: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.array]).isRequired,
    checkIfRetinaImgExists: React.PropTypes.bool,
    retinaImageSuffix: React.PropTypes.string,
    handleOnLoad: React.PropTypes.func,
    onLoad: React.PropTypes.func,
    onError: React.PropTypes.func
  },
  getDefaultProps: function() {
    return {
      checkIfRetinaImgExists: true,
      forceOriginalDimensions: true,
      retinaImageSuffix: '@2x',
      onError: function() {}
    };
  },
  componentWillReceiveProps: function(nextProps) {
    var isEqual;
    isEqual = true;
    if (isArray(this.props.src) && isArray(nextProps.src)) {
      isEqual = arrayEqual(this.props.src, nextProps.src);
    } else {
      isEqual = this.props.src === nextProps.src;
    }
    if (!isEqual) {
      return this.setState(assign(this.wrangleProps(nextProps), {
        width: null,
        height: null,
        imgLoaded: null,
        retinaImgExists: null,
        retinaCheckComplete: null
      }));
    }
  },
  getInitialState: function() {
    return this.wrangleProps();
  },
  componentDidMount: function() {
    this.checkForRetina();
    return this.checkLoaded();
  },
  componentDidUpdate: function() {
    return this.checkForRetina();
  },
  render: function() {
    return React.createElement("img", Object.assign({
      "ref": "img"
    }, this.props, this.state, {
      "src": this.state.src,
      "onError": this.props.onError,
      "onLoad": this.handleOnLoad
    }));
  },
  wrangleProps: function(props) {
    if (props == null) {
      props = this.props;
    }
    if (isArray(props.src)) {
      return {
        src: props.src[0],
        srcIsArray: true
      };
    } else {
      return {
        src: props.src,
        srcIsArray: false
      };
    }
  },
  checkForRetina: function() {
    if (this.state.retinaCheckComplete) {
      return;
    }
    if (isRetina() && this.props.checkIfRetinaImgExists) {
      return imageExists(this.getRetinaPath(), (function(_this) {
        return function(exists) {
          var ref;
          if (exists && ((ref = _this.state) != null ? ref.imgLoaded : void 0)) {
            _this.setState({
              src: _this.getRetinaPath()
            });
          } else if (exists) {
            _this.setState({
              retinaImgExists: true
            });
          }
          return _this.setState({
            retinaCheckComplete: true
          });
        };
      })(this));
    } else if (isRetina() && !this.props.checkIfRetinaImgExists) {
      this.setState({
        src: this.getRetinaPath()
      });
      return this.setState({
        retinaCheckComplete: true
      });
    }
  },
  checkLoaded: function() {
    var el;
    el = this.refs.img;
    if (!el.complete) {
      return false;
    }
    if (el.naturalWidth === 0) {
      return false;
    }
    return this.handleOnLoad();
  },
  handleOnLoad: function(e) {
    var ref;
    if (this.props.onLoad != null) {
      this.props.onLoad(e);
    }
    if (this.props.handleOnLoad != null) {
      this.props.handleOnLoad(e);
    }
    if (this.props.forceOriginalDimensions) {
      this.setState({
        width: this.refs.img.clientWidth,
        height: this.refs.img.clientHeight
      });
    }
    this.setState({
      imgLoaded: true
    });
    if (((ref = this.state) != null ? ref.retinaImgExists : void 0) || !this.props.checkIfRetinaImgExists) {
      return this.setState({
        src: this.getRetinaPath()
      });
    }
  },
  getRetinaPath: function() {
    var basename, src;
    if (this.state.srcIsArray) {
      return this.props.src[1];
    } else {
      basename = path.basename(this.props.src, path.extname(this.props.src));
      basename = basename + this.props.retinaImageSuffix + path.extname(this.props.src);
      src = this.props.src.replace(path.basename(this.props.src), basename);
      return src;
    }
  }
});
